package com.ul.resads.ui;

import java.util.ArrayList;
import java.util.List;
import java.util.Locale;



import com.ul.resads.data.Category;
import com.ul.resads.data.Food;
import com.ul.resads.data.ListCategory;
import com.ul.resads.data.ListFood;
import com.ul.resads.ui.R;
import com.ul.resads.util.RetrieveDataFrmActivity;




import android.app.ActionBar;
import android.app.FragmentTransaction;
import android.app.ProgressDialog;
import android.content.res.Configuration;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.v4.app.ActionBarDrawerToggle;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentActivity;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentPagerAdapter;
import android.support.v4.view.ViewPager;
import android.support.v4.widget.DrawerLayout;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ArrayAdapter;
import android.widget.ListView;
import android.widget.TextView;

public class MainActivity extends FragmentActivity implements
		ActionBar.TabListener ,RetrieveDataFrmActivity, OnItemClickListener{

	SectionsPagerAdapter mSectionsPagerAdapter;
	ViewPager mViewPager;

	private DrawerLayout mDrawerLayout;
	private ListView mDrawerList;
	private CharSequence mTitle;
	private ActionBarDrawerToggle mDrawerToggle;
	private ProgressDialog progressDialog;
	private List<Category> categoryList;
	private List<Food> foodList;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		//Initial Food List;
		foodList=new ArrayList<Food>();
		
		// Set up the action bar.
		final ActionBar actionBar = getActionBar();
		actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_TABS);

		mTitle = getTitle();
			
		
		mDrawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
		mDrawerList = (ListView) findViewById(R.id.left_drawer);
		mDrawerList.setOnItemClickListener(this);

		getActionBar().setDisplayHomeAsUpEnabled(true);
		getActionBar().setHomeButtonEnabled(true);

		mDrawerToggle = new ActionBarDrawerToggle(this,mDrawerLayout, R.drawable.ic_drawer, 
													R.string.drawer_open, 
													R.string.drawer_close ) {
			public void onDrawerClosed(View view) {
				getActionBar().setTitle(mTitle);
				invalidateOptionsMenu(); // creates call to
											// onPrepareOptionsMenu()
			}

			public void onDrawerOpened(View drawerView) {
				getActionBar().setTitle(mTitle);
				invalidateOptionsMenu(); // creates call to
											// onPrepareOptionsMenu()
			}
		};
		mDrawerLayout.setDrawerListener(mDrawerToggle);
//		 Create the adapter that will return a fragment for each of the three
//		 primary sections of the app.
		mSectionsPagerAdapter = new SectionsPagerAdapter(
				getSupportFragmentManager());

		// Set up the ViewPager with the sections adapter.
		mViewPager = (ViewPager) findViewById(R.id.pager);
		mViewPager.setAdapter(mSectionsPagerAdapter);
		mViewPager.setOffscreenPageLimit(3);

		mViewPager
				.setOnPageChangeListener(new ViewPager.SimpleOnPageChangeListener() {
					@Override
					public void onPageSelected(int position) {
						actionBar.setSelectedNavigationItem(position);
					}
				});

		// For each of the sections in the app, add a tab to the action bar.
		for (int i = 0; i < mSectionsPagerAdapter.getCount(); i++) {

			actionBar.addTab(actionBar.newTab()
					.setText(mSectionsPagerAdapter.getPageTitle(i))
					.setTabListener(this));
		}
		//Load Category
		LoadCategoryTask cateTask=new LoadCategoryTask();
		cateTask.execute("http://ul-soft.com/mobile-service/getdata.php?action=category");
		// Load Data 
		LoadDataTask task=new LoadDataTask();
		task.execute("http://ul-soft.com/mobile-service/getdata.php?action=food&catid=all");
		
		
	}
	@Override
	public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
			
		LoadDataTask task=new LoadDataTask();
		if(categoryList.get(position).getCatName().equals("All")){
			task.execute("http://ul-soft.com/mobile-service/getdata.php?action=food&catid=all");
		}else{
			task.execute("http://ul-soft.com/mobile-service/getdata.php?action=food&catid="+categoryList.get(position).getCatId());
		}
		mDrawerLayout.closeDrawers();
	}
	 public boolean onOptionsItemSelected(MenuItem item) {
         // The action bar home/up action should open or close the drawer.
         // ActionBarDrawerToggle will take care of this.
        if (mDrawerToggle.onOptionsItemSelected(item)) {
            return true;
        }
       
        return false;
        }
	 @Override
	    protected void onPostCreate(Bundle savedInstanceState) {
	        super.onPostCreate(savedInstanceState);
	        // Sync the toggle state after onRestoreInstanceState has occurred.
	        mDrawerToggle.syncState();
	    }

	    @Override
	    public void onConfigurationChanged(Configuration newConfig) {
	        super.onConfigurationChanged(newConfig);
	        // Pass any configuration change to the drawer toggls
	        mDrawerToggle.onConfigurationChanged(newConfig);
	    }

	@Override
	public boolean onPrepareOptionsMenu(Menu menu) {
		// If the nav drawer is open, hide action items related to the content
		// view
		return super.onPrepareOptionsMenu(menu);
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		MenuInflater inflater = getMenuInflater();
        inflater.inflate(R.menu.main, menu);
        return super.onCreateOptionsMenu(menu);
	
        
	}

	@Override
	public void onTabSelected(ActionBar.Tab tab,
			FragmentTransaction fragmentTransaction) {
		// When the given tab is selected, switch to the corresponding page in
		// the ViewPager.
		mViewPager.setCurrentItem(tab.getPosition());
	}

	@Override
	public void onTabUnselected(ActionBar.Tab tab,
			FragmentTransaction fragmentTransaction) {
	}

	@Override
	public void onTabReselected(ActionBar.Tab tab,
			FragmentTransaction fragmentTransaction) {
	}

	/**
	 * A {@link FragmentPagerAdapter} that returns a fragment corresponding to
	 * one of the sections/tabs/pages.
	 */
	public class SectionsPagerAdapter extends FragmentPagerAdapter {

		public SectionsPagerAdapter(FragmentManager fm) {
			super(fm);
		}

		@Override
		public Fragment getItem(int position) {
			// getItem is called to instantiate the fragment for the given page.
			// Return a DummySectionFragment (defined as a static inner class
			// below) with the page number as its lone argument.
		
			Fragment fragment = null;
			switch (position) {
			case 0:
				fragment = new FoodFragment();
				break;
			case 1:		
				fragment=new PromotionFragment();
				break;
			case 2: 
				 fragment = new MyMap();
				break;
			}

			return fragment;
		}

		@Override
		public int getCount() {
			// Show 3 total pages.
			return 3;
		}

		@Override
		public CharSequence getPageTitle(int position) {
			Locale l = Locale.getDefault();
			switch (position) {
			case 0:
				return getString(R.string.title_section1).toUpperCase(l);
			case 1:
				return getString(R.string.title_section2).toUpperCase(l);
			case 2:
				return getString(R.string.title_section3).toUpperCase(l);
			}
			return null;
		}
	}
	
	/** Asytask Class **/
	class LoadDataTask extends AsyncTask<String, Integer, List<Food>> {

		@Override
		protected void onPreExecute() {
			progressDialog = ProgressDialog.show(MainActivity.this,
					"Loading Data", "Please wait", true);
		}

		@Override
		protected List<Food> doInBackground(String... params) {
			
			ListFood foods=new ListFood();
			foods.excuteURL(params[0]);			
			return foods.getFoodList();
		}

		protected void onPostExecute(List<Food> result) {
			//Refresh Data in Fragment
			
			
			FoodFragment f=(FoodFragment)getSupportFragmentManager().
			findFragmentByTag("android:switcher:"+R.id.pager+":0");
			foodList=result;
			f.refreshData((ArrayList<Food>)foodList);
		
			progressDialog.dismiss();

		}
	}
	class LoadCategoryTask extends AsyncTask<String, Integer, List<Category>> {

		@Override
		protected List<Category> doInBackground(String... params) {
			// TODO Auto-generated method stub
			
			ListCategory category=new ListCategory();
			category.excuteURL(params[0]);
		
			return category.getCategoryList();
		}
		
		protected void onPostExecute(List<Category> result) {
			
			categoryList=result;
			String data[]=new String[result.size()+1];
			categoryList.add(new Category(0,"All"));
			for(int i=0;i<result.size();i++){
				data[i]=result.get(i).getCatName();
			}
		
			
			mDrawerList.setAdapter(new ArrayAdapter<String>(getApplicationContext(),
					R.layout.drawer_list_item, data));
		}
	
	}	
	
	@Override
	public List<Food> getFoodList() {
		// TODO Auto-generated method stub
		return foodList;
	}


}
